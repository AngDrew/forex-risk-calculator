# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options

analyzer:
  exclude:
    - 'example/**'
    - 'build/**'
    - '**/*.g.dart'
    - '**/*.freezed.dart'

dart_code_metrics:
  rules:
    # Show potential errors
    - avoid-cascade-after-if-null
    - avoid-collection-methods-with-unrelated-types
    - avoid-duplicate-exports
    - avoid-dynamic
    - avoid-missing-enum-constant-in-map
    - avoid-passing-async-when-sync-expected
    - avoid-throw-in-catch-block
    - avoid-unused-parameters
    - avoid-unnecessary-type-assertions
    - avoid-unnecessary-type-casts
    - avoid-unrelated-type-assertions
    - avoid-unrelated-type-casts
    - no-empty-block
    - no-equal-then-else
    - prefer-correct-test-file-name
    - prefer-match-file-name
    - prefer-return-await
    - avoid-self-assignment
    - avoid-self-compare
    - avoid-shadowing
    - prefer-iterable-of
    - no-equal-switch-case
    - no-equal-conditions
    - avoid-equal-expressions
    - avoid-missed-calls
    - avoid-unnecessary-negations
    - avoid-unused-generics
    - function-always-returns-null
    - avoid-throw-objects-without-tostring
    - avoid-unsafe-collection-methods
    - prefer-wildcard-pattern
    - no-equal-switch-expression-cases
    - avoid-future-tostring
    - avoid-unassigned-late-fields-keyword
    - avoid-nested-futures
    - avoid-generics-shadowing
    - prefer-parentheses-with-if-null
    - no-equal-nested-conditions
    - avoid-shadowed-extension-methods
    - avoid-unnecessary-conditionals
    - avoid-double-slash-imports
    - avoid-map-keys-contains
    - prefer-correct-json-casts
    - avoid-duplicate-mixins
    - avoid-nullable-interpolation
    - avoid-unused-instances
    - prefer-correct-for-loop-increment
    - prefer-public-exception-classes
    - avoid-uncaught-future-errors
    - always-remove-listener
    - avoid-unnecessary-setstate
    - check-for-equals-in-render-object-setters
    - consistent-update-render-object
    - use-setstate-synchronously
    - avoid-incomplete-copy-with
    - proper-super-calls
    - dispose-fields
    - avoid-empty-setstate
    - avoid-state-constructors
    - avoid-recursive-widget-calls
    - avoid-missing-image-alt
    - avoid-passing-self-as-argument
    - avoid-unnecessary-if
    - avoid-unconditional-break
    - avoid-referencing-discarded-variables

    # Code simplification
    - avoid-redundant-async
    - avoid-redundant-else
    - avoid-unnecessary-nullable-return-type
    - avoid-redundant-pragma-inline
    - avoid-nested-records
    - avoid-redundant-positional-field-name
    - avoid-explicit-pattern-field-name
    - prefer-simpler-patterns-null-check
    - avoid-unnecessary-return
    - avoid-duplicate-patterns
    - avoid-keywords-in-wildcard-pattern
    - avoid-unnecessary-futures
    - avoid-unnecessary-reassignment
    - avoid-unnecessary-call
    - avoid-unnecessary-stateful-widgets
    - prefer-dedicated-media-query-methods
    - avoid-unnecessary-overrides-in-state
    - move-variable-closer-to-its-usage

    # Style
    - prefer-trailing-comma
    - unnecessary-trailing-comma
    - prefer-declaring-const-constructor
    - prefer-single-widget-per-file
    - newline-before-return

  metrics:
    cyclomatic-complexity: 20
    coupling-between-object-classes: 12
    depth-of-inheritance-tree: 5
    halstead-volume: 150
    source-lines-of-code: 150
    maintainability-index: 50
    maximum-nesting-level: 5
    number-of-added-methods: 10
    number-of-external-imports: 8
    number-of-implemented-interfaces: 5
    number-of-imports: 10
    number-of-methods: 10
    number-of-overridden-methods: 10
    number-of-parameters: 6
    response-for-class: 55
    tight-class-cohesion: 0.33
    weighted-methods-per-class: 35

    # Flutter specific
    number-of-used-widgets: 20
    widgets-nesting-level: 10

  metrics-exclude:
    - test/**